
// Exploring TidcalCycles i'm screaming

// https://tidalcycles.org/index.php/Tutorial


d1 $ sound "invaders:1"

// This does the same thing. I have no idea why.

d1 $ sound "bd" # n "3"

// play around with multiple tracks

d1 $ sound "hh hh hh hh hh hh hh hh hh hh hh hh"

d1 $ sound "hh hh hh hh hh hh"

d2 $ sound "arpy"

d3 $ sound "bd bd:23 bd bd:23"

hush

// Arbitrary names for tracks might be useful later on

p "gerard" $ sound "hh hh hh hh"

// kill d1 audio

d1 silence

// hush it all up

hush

// Rest on the clap

d1 $ sound "~ cp"

d2 $ sound "bd"

hush

// Solo functionality

solo 1

unsolo 1


// Patterns within patterns. Splits the 1 second cycle and smashes everything in the brackets within the first half of the cycle then gives the clap the rest of the second half of the cycle duration. Neato cheeto.

d1 $ sound "[bd sd sd bd sd sd bd] [cp cp [sn [sn sn bd]]]"

d1 $ sound "[bd sd sd bd sd sd bd] [cp cp [bd dork2:3]]"

hush


// Use periods as an alternative to brackets. Prolly can't nest with this though.

d1 $ sound "bd . sn sn sn sn sn . cp sd"

d1 $ sound "[[bd bd] ~] [sn sn sn ~ sn sn] [cp sd]"

hush

// Layering sounds within a pattern using a comma

d1 $ sound "[bd bd [bd bd], sd [cp cp cp] sd cp, hh hh hh hh hh hh hh hh hh hh hh hh]"

hush

// Layering poly instead of grouping

d1 $ sound "[bd bd bd bd, sd cp sd cp]"

d1 $ sound "[bd bd bd bd, cp sd cp sd cp]"

hush

// Play one step within a pattern per cycle with brackets

d1 $ sound "bd <sn cp sd>"

d1 $ sound "<airman airman:2 airman:4 airman:5> bd <cp sd arpy:8> cp cp"

d1 $ sound "bd <cp sd [sn cp cp sn sn sn sn sn sn]>"

hush

// division and multiplication can be used to manipulate pattern structure * /

d2 $ sound "[bd bd*2 [cp cp]*2, hh*12]"

d2 $ sound "[bd sn sn*3]/2 [bd sn*3 bd*4]/3"

d1 $ sound "[bd [sn sn]*2]/2 [bd [sn bd]/2]*2"

d1 $ sound "[<airman:7 cp airman:8>*2, <airman:4 bd> ,<airman:2 hh airman:1>*3]*2"

d1 $ sound "airman:1*8"

hush





// Use multiply and divide functions to transform a pattern

d1 $ rev (sound "bd*4 arpy sd")

d1 $ sound "bd*4 arpy sd"

// 'every' takes three parameters: a number, a function and a pattern to apply the function to.

d1 $ every 4 (rev) (sound "bd*4 arpy sd ")

hush



// You can "operate on the inner pattern of sample names, instead of the outer pattern of synthesier triggers that sound gives you". what does this mean? Is it more cpu efficient to operate on sample names?

d1 $ sound (every 4 (fast 4) "bd*2 [bd [sn sn*2 sn] sn]")

d1 $ every 4 (fast 4) $ sound "bd*2 [bd [sn sn*2 sn] sn]"

hush


// Adding effects

d1 $ sound "bd*90" # crush "4 2 3 1 1 8 8 8 8 8" # speed "6 2 1 4 3 4 9 1 1 1 1 1 1 1 1 2 2 2 2 9 9 9 9 9 9 9 9 9 9 9"

hush



d2 $ sound "bd bd cp*4" # gain (every 3 (rev) $ "3 1 2 0.7")

hush



d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [0.1 0.1 0.1] 2 3 [5 5 5]*2 2 3 1" # sound "bd:4"

d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "bd:4"


// ok this is getting insane though

d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [0.1 0.1 0.1] 2 3 [5 5 5]*2 2 3 1" # sound "airman:6"

d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "airman:5"

d1 $ gain "1 0.8 0.5 0.7 [4 4 4 4 4 4] 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "airman:6"

d2 $ gain "1 2 2 3 [1 1 1]*2 2 3 1" # sound "airman:09" # speed "0.9" # gain "1"



d1 $ gain "1 0.8 0.5 0.7 [4 4 4 4 4 4] 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "airman:6" # shape "[1 1 1 1 0 0 0 0 0 0 0 0]"

d1 $ gain "1 0.8 0.5 0.7 [4 4 4 4 4 4] 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "airman:6" # shape "[0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0]"

hush



d3 $ n "[0 .. 40] [9 -10 -30]" # sound "supergong"

hush


d1 $ sound "airman:3 airman:1 airman:2 airman:10" # speed "-0.9" # gain "1"

d1 $ sound "airman:3 airman:1 airman:2 airman:10" # speed "[-0.9, 0.9] -0.9 0.9 -2" # gain "1"

hush

setcps 12

setcps 0.5625

d1 $ up "0 1 2 3 4 5 6 7 8 9 10 11" # sound "arpy"

d1 $ up (run 3) # sound "arpy"


d1 $ sound "bd(7,12)"

d2 $ sound "bd"

//  # cps (slow 90 $ range 0.9 20 saw)

hush

d1 $ sound "bd*8" # up (run 8)

d1 $ sound "bd*8" # speed (run 8)

hush

d1 $ up (run 8) # sound "bd"


// I don't understand this structure. Why two $?

d1 $ sound "arpy*8" # up (every 2 (rev) $ run 8)

hush


d1 $ n "0 2 4" # s "airman"

hush

d1 $ sound $ samples "drum*4" "0 0 3"

d2 $ sound "hh:3*4"

hush

d1 $ sound $ samples "drum*4 hh airman airman*4" "0 8 2 3"

hush

d1 $ n (run 4) # s "drum airman"

d1 $ s "drum ~ airman airman ~" # n (run 4)

hush

d1 $ sound (samples "drum arpy cp hh" (run 10))

hush

d1 $ pan "0 0 0 0" # sound "bd sn drum arpy"

d1 $ pan "0 0 0 0 0 0 0 0 0" |>| sound "bd sn drum arpy"

hush

d1 $ up "0 0*2 0*4 1" # sound "[arpy, bass2, bd]" # gain "0.7"


d2 $ sound "bd:5*4"

hush

d1 $ sound "bass2*16" # gain (density 6 saw)

d1 $ sound "bass2*16" # gain (slow 0.046 $ tri)

hush

d1 $ sound "sn:2*16" # speed ((range 0.5 3 sine) * (slow 4 saw))

d1 $ sound "hh:2*4" # cutoff (range 30 100 $ slow 0.09 $ sine) # resonance "0.6" # gain "1.2"

d2 $ sound "hh:8*16" # cutoff (range 50 4000 $ slow 0.09 $ sine) # resonance "0.9" # gain "0.9"

hush

d1 $ sound "{bd hh sn cp, arpy bass2 drum notes can}"

d1 $ sound "[notes bass:6, bd bd bd bd bd bd bd cp]"

d1 $ sound "{notes bass:6, bd bd bd bd bd bd bd cp}"

hush

d1 $ sound "{~ ~ ~ ~ ~ ~ ~ ~, drum:2 drum:6 drum:2}"

d2 $ sound "bass2*2" # speed 1 # cutoff 150

d2 $ sound "bass2*2" # speed 1.1 # cutoff 150

d2 $ sound "bass2*2" # speed 1.3 # cutoff 150

d2 $ sound "bass2*6" # speed 1.3 # cutoff (range 150 3000 $ fast 2 $ sine) # resonance "0.2"

d2 $ sound "bass2*6" # speed 1.3 # cutoff (range 150 3000 $ fast 2 $ sine) # resonance "0.2"

hush

d1 $ sound "sid:5*16"

d1 $ sound "bd*8 sn*8" # speed (range 1 9 $ tri)

d1 $ sound "bd*8 sn*8" # speed (slow 4 $ range (-4) 4 $ tri)

hush

d1 $ sound "hh*32" # cutoff (range 200 2000 $ fast 3 $ sine) # resonance "0"


// shift that shit

d1 $ sound "hh*8"

d2 $ sound "bd"

d3 $ (0.008 ~>) $ sound "airman"

d3 $ (0.02 <~) $ sound "airman"

hush

d1 $ s "airman*32?" # n (irand 2)

hush

d1 $ sound "bd*16?"

d1 $ degrade $ sound "bd*16"

hush

d1 $ degradeBy 0.80 $ sound "bd*16"

d2 $ degradeBy 0.60 $ sound "[airman:5, airman:10, airman:2]*16"

d2 $ degradeBy 0.60 $ sound "airman:5*16"

d3 $ degradeBy 0.40 $ sound "airman:10*16"

d4 $ degradeBy 0.40 $ sound "[airman:8, airman:1]*16"

d4 $ degradeBy 0.40 $ sound "[airman:7, airman:3]*16"

d4 $ degradeBy 0.40 $ sound "[airman:6, airman:1]*16"

d5 $ degradeBy 0.80 $ sound "cp*16" # gain "1.1"

d6 $ rarely (# crush 1) $ sound "airman:9*16" # speed "0.8" # end "0.9" # gain "0.8"

hush

d1 $ every 5 (|+| speed "0.5") $ every 4 (0.25 <~) $ every 3 (rev) $
  sound "bd sn arpy*2 cp"
  # speed "[1 1.25 0.75 -1.5]/3"

  hush

d1 $ whenmod 5 4 (# crush 1) $ sound "cp"

hush


d1 $ every 8 (rev) $ every 4 (density 2) $ sound "bd hh sn cp"

d1 $ whenmod 16 14 (# speed "2") $ sound "bd arpy*2 cp bass2"

hush

d1 $ const (sound "arpy*3") $ sound "bd sn cp hh"

d1 $ whenmod 8 6 (const $ sound "arpy(3,8) bd*4") $ sound "bd sn bass2 sn"

d1 $ every 3 (const $ sound "bd*4 sn*2") $ sound "bd sn bass2 sn"

hush


d1 $ fastcat [sound "cp" # gain "1.05",
             sound "casio casio:1 casio:2*2" # crush "2" # gain "0.9",
             sound "airman:5*4",
             sound "airman:6*5 airman:1"
            ]

d1 $ fastcat [sound "cp" # gain "1.05",
             sound "casio casio:1 casio:2*2" # crush "2" # gain "0.9",
             sound "airman:5*4",
             sound "airman:6*5",
             sound "airman:1"
            ]


hush


d1 $ stack [
 sound "bd bd*2",
 sound "hh*2 [sn cp] cp future*4",
 sound (samples "arpy*8" (run 16))
]



d1 $ stack [
  degradeBy 0.60 $ sound "airman:5*16",
  degradeBy 0.40 $ sound "airman:10*16",
  degradeBy 0.40 $ sound "[airman:8, airman:1]*16",
  degradeBy 0.80 $ sound "cp*16" # gain "1.1"
]

d1 $ stack [
  degradeBy 0.60 $ sound "airman:5*16",
  degradeBy 0.40 $ sound "airman:10*16",
  degradeBy 0.40 $ sound "[airman:7, airman:3]*16",
  degradeBy 0.80 $ sound "cp*16" # gain "1.1"
]


d1 $ stack [
  degradeBy 0.60 $ sound "airman:5*16",
  degradeBy 0.40 $ sound "airman:10*16",
  degradeBy 0.40 $ sound "[airman:6, airman:1]*16",
  degradeBy 0.80 $ sound "cp*16" # gain "1.1"
  ]

d2 $ sound "airman:9*16" # speed "0.8" # end "0.9" # gain "0.8" # crush 1

unsolo 1

solo 1

hush


// start with D2 for two seconds then execute D1 stack 3. After this begins to sink in fade volume in on
a granular smear of the first lead synth //



d1 $ stack [
  degradeBy 0.60 $ sound "airman:5*16",
  degradeBy 0.40 $ sound "airman:10*16",
  degradeBy 0.40 $ sound "[airman:8, airman:1]*16",
  degradeBy 0.80 $ sound "cp*16" # gain "1.1"
] # speed (slow 4 $ range 4 (-4) $ tri)


d1 $ stack [
  degradeBy 0.60 $ sound "airman:5*16",
  degradeBy 0.40 $ sound "airman:10*16",
  degradeBy 0.40 $ sound "[airman:8, airman:1]*16",
  degradeBy 0.80 $ sound "cp*16" # gain "1.1"
] # speed (slow 64 $ range (0.3) 4 $ tri)

hush


d1 $ stack [
  degradeBy 0.60 $ sound "airman:5*16",
  degradeBy 0.40 $ sound "airman:10*16",
  degradeBy 0.40 $ sound "[airman:8, airman:1]*16",
  degradeBy 0.80 $ sound "cp*16" # gain "1.1"
] # speed (slow 64 $ range 0.7 2 $ tri) # cut "1"


d2 $ stack [
  sound (samples "arpy*4" (run 16)) # speed "0.25" # cut "1",
  sound (samples "bass2*4" (run 16)) # speed "0.5" # cut "1"
  ] # cutoff (fast 1 $ range "200" "500" $ tri)

hush




















// Import 36,000 clips from Masterpeice Randomizer WAVs and scrub with Tidal
