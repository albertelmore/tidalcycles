
// Exploring TidcalCycles i'm screaming

// https://tidalcycles.org/index.php/Tutorial


d1 $ sound "invaders:1"

// This does the same thing. I have no idea why.

d1 $ sound "bd" # n "3"

// play around with multiple tracks

d1 $ sound "hh hh hh hh hh hh hh hh hh hh hh hh"

d1 $ sound "hh hh hh hh hh hh"

d2 $ sound "arpy"

d3 $ sound "bd bd:23 bd bd:23"

hush

// Arbitrary names for tracks might be useful later on

p "gerard" $ sound "hh hh hh hh"

// kill d1 audio

d1 silence

// hush it all up

hush

// Rest on the clap

d1 $ sound "~ cp"

d2 $ sound "bd"

hush

// Solo functionality

solo 1

unsolo 1


// Patterns within patterns. Splits the 1 second cycle and smashes everything in the brackets within the first half of the cycle then gives the clap the rest of the second half of the cycle duration. Neato cheeto.

d1 $ sound "[bd sd sd bd sd sd bd] [cp cp [sn [sn sn bd]]]"

d1 $ sound "[bd sd sd bd sd sd bd] [cp cp [bd dork2:3]]"

hush


// Use periods as an alternative to brackets. Prolly can't nest with this though.

d1 $ sound "bd . sn sn sn sn sn . cp sd"

d1 $ sound "[[bd bd] ~] [sn sn sn ~ sn sn] [cp sd]"

hush

// Layering sounds within a pattern using a comma

d1 $ sound "[bd bd [bd bd], sd [cp cp cp] sd cp, hh hh hh hh hh hh hh hh hh hh hh hh]"

hush

// Layering poly instead of grouping

d1 $ sound "[bd bd bd bd, sd cp sd cp]"

d1 $ sound "[bd bd bd bd, cp sd cp sd cp]"

hush

// Play one step within a pattern per cycle with brackets

d1 $ sound "bd <sn cp sd>"

d1 $ sound "<airman airman:2 airman:4 airman:5> bd <cp sd arpy:8> cp cp"

d1 $ sound "bd <cp sd [sn cp cp sn sn sn sn sn sn]>"

hush

// division and multiplication can be used to manipulate pattern structure * /

d2 $ sound "[bd bd*2 [cp cp]*2, hh*12]"

d2 $ sound "[bd sn sn*3]/2 [bd sn*3 bd*4]/3"

d1 $ sound "[bd [sn sn]*2]/2 [bd [sn bd]/2]*2"

d1 $ sound "[<airman:7 cp airman:8>*2, <airman:4 bd> ,<airman:2 hh airman:1>*3]*2"

d1 $ sound "airman:1*8"

hush





// Use multiply and divide functions to transform a pattern

d1 $ rev (sound "bd*4 arpy sd")

d1 $ sound "bd*4 arpy sd"

// 'every' takes three parameters: a number, a function and a pattern to apply the function to.

d1 $ every 4 (rev) (sound "bd*4 arpy sd ")

hush



// You can "operate on the inner pattern of sample names, instead of the outer pattern of synthesier triggers that sound gives you". what does this mean? Is it more cpu efficient to operate on sample names?

d1 $ sound (every 4 (fast 4) "bd*2 [bd [sn sn*2 sn] sn]")

d1 $ every 4 (fast 4) $ sound "bd*2 [bd [sn sn*2 sn] sn]"

hush


// Adding effects

d1 $ sound "bd*90" # crush "4 2 3 1 1 8 8 8 8 8" # speed "6 2 1 4 3 4 9 1 1 1 1 1 1 1 1 2 2 2 2 9 9 9 9 9 9 9 9 9 9 9"

hush



d2 $ sound "bd bd cp*4" # gain (every 3 (rev) $ "3 1 2 0.7")

hush



d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [0.1 0.1 0.1] 2 3 [5 5 5]*2 2 3 1" # sound "bd"

d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "bd"


// ok this is getting insane though

d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [0.1 0.1 0.1] 2 3 [5 5 5]*2 2 3 1" # sound "airman:6"

d1 $ gain "1 0.8 0.5 0.7 1 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "airman:5"

d1 $ gain "1 0.8 0.5 0.7 [4 4 4 4 4 4] 1 1 1 2 [4 4 4] 2 3 [5 5 5]*2 2 3 1" # sound "airman:6"

hush









// Import 36,000 clips from Masterpeice Randomizer WAVs and scrub with Tidal
